generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

enum roleEnam {
  buyer
  seller
  admin
}

model User {
  id             String     @id @default(cuid())
  name           String?
  email          String?    @unique
  emailVerified  DateTime?
  image          String?
  hasbedPassword String?
  role           roleEnam   @default(buyer)
  accounts       Account[]
  sessions       Session[]
  products       Products[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Category {
  id        String      @id @default(cuid())
  name      String
  slug      String      @unique
  image     String?
  products  Products[]
  billboard Billboard[]
}

model Division {
  id       String     @id @default(cuid())
  name     String     @unique
  slug     String     @unique
  image    String?
  district District[]
  products Products[]
}

model District {
  id         String     @id @default(cuid())
  name       String     @unique
  slug       String     @unique
  image      String?
  divisionId String
  division   Division   @relation(fields: [divisionId], references: [id], onDelete: Cascade)
  products   Products[]

  @@index([divisionId])
}

model Products {
  id         String   @id @default(cuid())
  title      String
  slug       String   @unique
  desc       String   @db.LongText
  short_desc String
  isNew      Boolean  @default(false)
  views      Int      @default(0)
  sale       Int      @default(0)
  price      Float
  quantity   Int
  outOfStoke Boolean  @default(false)
  sellerId   String
  user       User     @relation(fields: [sellerId], references: [id], onDelete: Cascade)
  catId      String
  category   Category @relation(fields: [catId], references: [id], onDelete: Cascade)
  divisionId String
  division   Division @relation(fields: [divisionId], references: [id], onDelete: Cascade)
  districtId String
  district   District @relation(fields: [districtId], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  images     Image[]

  @@index([divisionId])
  @@index([districtId])
  @@index([sellerId])
  @@index([catId])
  @@fulltext([title])
}

model Image {
  id        String   @id @default(uuid())
  productId String
  product   Products @relation(fields: [productId], references: [id], onDelete: Cascade)
  url       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([productId])
}

model Billboard {
  id       String   @id @default(uuid())
  label    String
  image    String
  catId    String
  category Category @relation(fields: [catId], references: [id], onDelete: Cascade)

  @@index([catId])
}
